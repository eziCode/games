from locale import YESEXPR
from tkinter import Y
from tkinter.tix import COLUMN
import numpy as np
import pygame
import sys
import random

BLUE = (0, 0, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
YELLOW = (255, 255, 0)

ROW_COUNT = 4
COLUMN_COUNT = 4

highest_score = []
base_score = 0
def total_possible_moves(board):
    possible_moves = []
    for c in range(COLUMN_COUNT):
        for r in range(ROW_COUNT):
            if board[c][r] == 0:
                addingTuple = (c,r)
                possible_moves.append(addingTuple)
    return possible_moves

def score_moves(board, possible_moves):
    scoringDict = {}
    game_board_copy = board[:]
    for i in possible_moves:
        r,c = i
        game_board_copy[r][c] = 2
        if control_1_corner(game_board_copy, 2):
            scoringDict[i] = 50000
        if control_1_outer_middle_square(game_board_copy, 2):
            scoringDict[i] = 75000
        if control_1_center_square(game_board_copy, 2):
            scoringDict[i] = 100000
        if generic_two_in_a_row(game_board_copy, 2):
            scoringDict[i] = 300000
        if control_2_in_a_row_on_middle_diagonal(game_board_copy, 2):
            scoringDict[i] = 400000
        if control_2_middle_edge_squares_in_a_row(game_board_copy, 2):
            scoringDict[i] = 500000
        if control_2_center_squares(game_board_copy, 2):
            scoringDict[i] = 750000
        if winning_move(game_board_copy, 2):
            scoringDict[i] = 1000000
        game_board_copy[r][c] = 0
    for x in possible_moves:
        r,c = x
        game_board_copy[r][c] = 1
        if winning_move(game_board_copy, 1):
            scoringDict[x] = 950000
        game_board_copy[r][c] = 0
    return scoringDict

def control_1_corner(board, piece):
    if board[3][0] == piece or board[0][0] == piece or board[0][3] == piece or board[3][3] == piece:
        return True

def control_1_outer_middle_square(board, piece):
    if board[1][0] == piece or board[2][0] == piece or board[3][1] == piece or board[3][2] == piece or board[2][3] == piece or board[1][3] == piece or board[0][1] == piece or board[0][2] == piece:
        return True

def control_1_center_square(board, piece):
    if board[1][1] == piece or board[1][2] == piece or board[2][1] == piece or board[2][2] == piece:
        return True

def generic_two_in_a_row(board, piece):
    for c in range(COLUMN_COUNT - 2):
        for r in range(ROW_COUNT):
            if board[r][c] == piece and board[r][(c + 1) % 4] == piece:
                return True
    
    for c in range(COLUMN_COUNT):
        for r in range(ROW_COUNT - 2):
            if board[r][c] == piece and board[(r + 1) % 4][c] == piece:
                return True
    
    for c in range(COLUMN_COUNT - 2):
        for r in range(ROW_COUNT - 2):
            if board[r][c] == piece and board[(r + 1) % 4][(c + 1) % 4] == piece:
                return True
    
    for c in range(COLUMN_COUNT - 2):
        for r in range(2, ROW_COUNT):
            if board[r][c] == piece and board[(r - 1) % 4][(c + 1) % 4] == piece:
                return True


def control_2_in_a_row_on_middle_diagonal(board, piece):
    if board[2][1] == piece and board[1][2] == piece:
        return True
    if board[2][2] == piece and board[1][1] == piece:
        return True

def control_2_middle_edge_squares_in_a_row(board, piece):
    if board[1][0] == piece and board[2][0] == piece:
        return True
    if board[3][1] == piece and board[3][2] == piece:
        return True
    if board[2][3] == piece and board[1][3] == piece:
        return True
    if board[0][1] == piece and board[0][2] == piece:
        return True

def control_2_center_squares(board, piece):
    if board[1][1] == piece and board[1][2] == piece:
        return True
    if board[2][1] == piece and board[2][2] == piece:
        return True
    if board[1][2] == piece and board[2][2] == piece:
        return True
    if board[1][1] == piece and board[2][1] == piece:
        return True

def create_board():
    board = np.zeros((ROW_COUNT, COLUMN_COUNT))
    return board

def is_move_valid(board, row, col):
    if board[row][col] != 0:
        return False

def drop_piece(board, row, col, piece):
    board[row][col] = piece

def print_board(board):
    print(np.flip(board, 0))

def winning_move(board, piece):
    for c in range(COLUMN_COUNT - 1):
        for r in range(ROW_COUNT):
            if board[r][c] == piece and board[r][(c + 1) % 4] == piece and board[r][(c + 2) % 4] == piece:
                return True

    for c in range(COLUMN_COUNT):
        for r in range(ROW_COUNT - 1):
            if board[r][c] == piece and board[(r + 1) % 4][c] == piece and board[(r + 2) % 4][c] == piece:
                return True
    
    for c in range(COLUMN_COUNT - 1):
        for r in range(ROW_COUNT - 1):
            if board[r][c] == piece and board[(r + 1) % 4][(c + 1) % 4] == piece and board[(r + 2) % 4][(c + 2) % 4] == piece:
                return True
    
    for c in range(COLUMN_COUNT - 1):
        for r in range(1, ROW_COUNT):
            if board[r][c] == piece and board[(r - 1) % 4][(c + 1) % 4] == piece and board[(r - 2) % 4][(c + 2) % 4] == piece:
                return True

def draw_board(board):
    pygame.draw.line(screen, BLUE, (125, 0), (125, 600))
    pygame.draw.line(screen, BLUE, (300, 0), (300, 600))
    pygame.draw.line(screen, BLUE, (475, 0), (475, 600))
    pygame.draw.line(screen, BLUE, (0, 125), (600, 125))
    pygame.draw.line(screen, BLUE, (0, 300), (600, 300))
    pygame.draw.line(screen, BLUE, (0, 475), (600, 475))

    pygame.display.update()


board = create_board()
print(board)
game_over = False
turn = 0

pygame.init()

size = (600, 600)

screen = pygame.display.set_mode(size)
draw_board(board)
pygame.display.update()

myfont = pygame.font.SysFont("monospace", 75)

while not game_over:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit()
        
        if event.type == pygame.MOUSEBUTTONDOWN:
            if turn == 0:
                x,y = pygame.mouse.get_pos()
                if x <= 125 and y <= 125:
                    if is_move_valid(board, 3, 0) == False:
                        continue
                    else:
                        drop_piece(board, 3, 0, 1)
                        pygame.draw.circle(screen, RED, (62, 62), 30)
                        pygame.display.update()
                        print_board(board)
                elif x <= 125 and 125 < y <= 300:
                    if is_move_valid(board, 2, 0) == False:
                        continue
                    else:
                        drop_piece(board, 2, 0, 1)
                        pygame.draw.circle(screen, RED, (62, 212), 30)
                        pygame.display.update()
                        print(board)
                elif x <= 125 and 300 < y <= 475:
                    if is_move_valid(board, 1, 0) == False:
                        continue
                    else:
                        drop_piece(board, 1, 0, 1)
                        pygame.draw.circle(screen, RED, (62, 387), 30)
                        pygame.display.update()
                        print(board)
                elif x <= 125 and y > 475:
                    if is_move_valid(board, 0, 0) == False:
                        continue
                    else:
                        drop_piece(board, 0, 0, 1)
                        pygame.draw.circle(screen, RED, (62, 537), 30)
                        pygame.display.update()
                        print(board)
                elif 125 < x <= 300 and y <= 125:
                    if is_move_valid(board, 3, 1) == False:
                        continue
                    else:
                        drop_piece(board, 3, 1, 1)
                        pygame.draw.circle(screen, RED, (212, 62), 30)
                        pygame.display.update()
                        print(board)
                elif 125 < x <= 300 and 125 < y <= 300:
                    if is_move_valid(board, 2, 1) == False:
                        continue
                    else:
                        drop_piece(board, 2, 1, 1)
                        pygame.draw.circle(screen, RED, (212, 212), 30)
                        pygame.display.update()
                        print(board)
                elif 125 < x <= 300 and 300 < y <= 475:
                    if is_move_valid(board, 1, 1) == False:
                        continue
                    else:
                        drop_piece(board, 1, 1, 1)
                        pygame.draw.circle(screen, RED, (212, 387), 30)
                        pygame.display.update()
                        print(board)
                elif 125 < x <= 300 and y > 475:
                    if is_move_valid(board, 0, 1) == False:
                        continue
                    else:
                        drop_piece(board, 0, 1, 1)
                        pygame.draw.circle(screen, RED, (212, 537), 30)
                        pygame.display.update()
                        print(board)
                elif 300 < x <= 475 and y <= 125:
                    if is_move_valid(board, 3, 2) == False:
                        continue
                    else:
                        drop_piece(board, 3, 2, 1)
                        pygame.draw.circle(screen, RED, (387, 62), 30)
                        pygame.display.update()
                        print(board)
                elif 300 < x <= 475 and 125 < y <= 300:
                    if is_move_valid(board, 2, 2) == False:
                        continue
                    else:
                        drop_piece(board, 2, 2, 1)
                        pygame.draw.circle(screen, RED, (387, 212), 30)
                        pygame.display.update()
                        print(board)
                elif 300 < x <= 475 and 300 < y <= 475:
                    if is_move_valid(board, 1, 2) == False:
                        continue
                    else:
                        drop_piece(board, 1, 2, 1)
                        pygame.draw.circle(screen, RED, (387, 387), 30)
                        pygame.display.update()
                        print(board)
                elif 300 < x <= 475 and y > 475:
                    if is_move_valid(board, 0, 2) == False:
                        continue
                    else:
                        drop_piece(board, 0, 2, 1)
                        pygame.draw.circle(screen, RED, (387, 537), 30)
                        pygame.display.update()
                        print(board)
                elif x > 475 and y <= 125:
                    if is_move_valid(board, 3, 3) == False:
                        continue
                    else:
                        drop_piece(board, 3, 3, 1)
                        pygame.draw.circle(screen, RED, (537, 62), 30)
                        pygame.display.update()
                        print(board)
                elif x > 475 and 125 < y <= 300:
                    if is_move_valid(board, 2, 3) == False:
                        continue
                    else:
                        drop_piece(board, 2, 3, 1)
                        pygame.draw.circle(screen, RED, (537, 212), 30)
                        pygame.display.update()
                        print(board)
                elif x > 475 and 300 < y <= 475:
                    if is_move_valid(board, 1, 3) == False:
                        continue
                    else:
                        drop_piece(board, 1, 3, 1)
                        pygame.draw.circle(screen, RED, (537, 387), 30)
                        pygame.display.update()
                        print(board)
                elif x > 475 and y > 475:
                    if is_move_valid(board, 0, 3) == False:
                        continue
                    else:
                        drop_piece(board, 0, 3, 1)
                        pygame.draw.circle(screen, RED, (537, 537), 30)
                        pygame.display.update()
                        print(board)
                if winning_move(board, 1):
                    screen.fill(BLACK)
                    label = myfont.render("Player 1 Wins!", True, 1, RED)
                    screen.blit(label, (10, 10))
                    pygame.display.update()
                    game_over = True
            else:
                score_my_moves = score_moves(board, total_possible_moves(board))
                for obj in score_my_moves:
                    if score_my_moves[obj] > base_score:
                        base_score = score_my_moves[obj]
                        highest_score.clear()
                        highest_score.append(obj)
                r,c = highest_score[0]
                drop_piece(board, r, c, 2)
                if r == 0 and c == 0:
                        drop_piece(board, 0, 0, 2)
                        pygame.draw.circle(screen, YELLOW, (62, 537), 30)
                        pygame.display.update()
                if r == 1 and c == 0:
                    drop_piece(board, 1, 0, 2)
                    pygame.draw.circle(screen, YELLOW, (62, 387), 30)
                    pygame.display.update()
                if r == 2 and c == 0:
                    drop_piece(board, 2, 0, 2)
                    pygame.draw.circle(screen, YELLOW, (62, 212), 30)
                    pygame.display.update()
                if r == 3 and c == 0:
                    drop_piece(board, 3, 0, 2)
                    pygame.draw.circle(screen, YELLOW, (62, 62), 30)
                    pygame.display.update()
                if r == 0 and c == 1:
                    drop_piece(board, 0, 1, 2)
                    pygame.draw.circle(screen, YELLOW, (212, 537), 30)
                    pygame.display.update()
                if r == 1 and c == 1:
                    drop_piece(board, 1, 1, 2)
                    pygame.draw.circle(screen, YELLOW, (212, 387), 30)
                    pygame.display.update()
                if r == 2 and c == 1:
                    drop_piece(board, 2, 1, 2)
                    pygame.draw.circle(screen, YELLOW, (212, 212), 30)
                    pygame.display.update()
                if r == 3 and c == 1:
                    drop_piece(board, 3, 1, 2)
                    pygame.draw.circle(screen, YELLOW, (212, 62), 30)
                    pygame.display.update()
                if r == 0 and c == 2:
                    drop_piece(board, 0, 2, 2)
                    pygame.draw.circle(screen, YELLOW, (387, 537), 30)
                    pygame.display.update()
                if r == 1 and c == 2:
                    drop_piece(board, 1, 2, 2)
                    pygame.draw.circle(screen, YELLOW, (387, 387), 30)
                    pygame.display.update()
                if r == 2 and c == 2:
                    drop_piece(board, 2, 2, 2)
                    pygame.draw.circle(screen, YELLOW, (387, 212), 30)
                    pygame.display.update()
                if r == 3 and c == 2:
                    drop_piece(board, 3, 2, 2)
                    pygame.draw.circle(screen, YELLOW, (387, 62), 30)
                    pygame.display.update()
                if r == 0 and c == 3:
                    drop_piece(board, 0, 3, 2)
                    pygame.draw.circle(screen, YELLOW, (537, 537), 30)
                    pygame.display.update()
                if r == 1 and c == 3:
                    drop_piece(board, 1, 3, 2)
                    pygame.draw.circle(screen, YELLOW, (537, 387), 30)
                    pygame.display.update()
                if r == 2 and c == 3:
                    drop_piece(board, 2, 3, 2)
                    pygame.draw.circle(screen, YELLOW, (537, 212), 30)
                    pygame.display.update()
                if r == 3 and c == 3:
                    drop_piece(board, 3, 3, 2)
                    pygame.draw.circle(screen, YELLOW, (537, 62), 30)
                    pygame.display.update()
                if winning_move(board, 2):
                    screen.fill(BLACK)
                    label = myfont.render("CPU Wins!", True, 1, YELLOW)
                    screen.blit(label, (10, 10))
                    pygame.display.update()
                    game_over = True
            turn += 1
            turn = turn % 2
            base_score = 0

            if game_over:
                pygame.time.wait(3000)
